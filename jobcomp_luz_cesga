#!/bin/tcsh
####################################################
#               COMPILATION JOB                    #
####################################################
#
# set source, compilation and run directories
#
set SOURCE=/home/cesga/mrvieo/Code_ene_06
set SCRDIR=Compile
set RUNDIR=`pwd`

#
# Linux compiler options (only relevant to Linux OS)
#
set LINUX_FC=ifort
#set LINUX_FC=ifc
#set LINUX_FC=g95
#set LINUX_FC=g77

#
# set 32 or 64 Bits executable
#
#set BITS=THIRTYTWO
set BITS=SIXTYFOUR

#
# set NETCDF directories
#
if ($BITS == THIRTYTWO) then
#  set NETCDFLIB=-L$HOME/lib32
#  set NETCDFINC=-I$HOME/lib32
  if ($LINUX_FC == g77) then
    set NETCDFLIB=-L../netcdf_g77/
    set NETCDFINC=-I../netcdf_g77/
  else
    #set NETCDFLIB=-L/usr/local/netcdf_ifc/lib
    #set NETCDFINC=-I/usr/local/netcdf_ifc/include
    set NETCDFLIB=-L/usr/local/lib
    set NETCDFINC=-I/usr/local/include
  endif
else
    set NETCDFLIB=-L/usr/local/lib
    set NETCDFINC=-I/usr/local/include
endif

set NETCDFLIB=-L/opt/cesga/netcdf/lib
set NETCDFINC=-I/opt/cesga/netcdf/include

#
# set MPI directories if needed
#
 set MPILIB=-L$HOME/lib
 set MPIINC=-I$HOME/include
#
# END OF USER'S MODIFICATIONS
####################################################

#
# Use GNU Make command
#
set MAKE = make
#
# clean scratch area
#
rm -rf $SCRDIR
mkdir $SCRDIR
#
# copy SOURCE code
#
cp -f ${SOURCE}/*.F $SCRDIR
cp -f ${SOURCE}/*.h $SCRDIR
cp -f ${SOURCE}/Make* $SCRDIR
cp -f ${SOURCE}/testkeys $SCRDIR
cp -f ${SOURCE}/jobcomp $SCRDIR
cp -f ${SOURCE}/amr.in $SCRDIR
cp -Rf ${SOURCE}/AGRIFZOOM $SCRDIR
#
# overwrite with local files
#
cp -f *.F $SCRDIR
cp -f *.h $SCRDIR
cp -f Make* $SCRDIR
cp -f jobcomp $SCRDIR
#cp -f amr.in $SCRDIR
#
# Change directory
#
cd $SCRDIR

#
# generates LDFLAGS1 according to users notifications
#
setenv LDFLAGS1 "$NETCDFLIB $MPILIB"
setenv CPPFLAGS1 "$NETCDFINC $MPIINC"

#
# determine operating system
#
set uname = `uname`
echo OPERATING SYSTEM IS: $uname

#
# Set compilation options
#
if ($uname == Linux) then          # LINUX
  set OS = Linux
  set CONV=conv.linux
  if ($LINUX_FC == ifort || $LINUX_FC == ifc) then
    set MAKEAGRIF=Makefile.linux.ifc
    setenv CPP1 "fpp -free"
    setenv CFT1 $LINUX_FC
   #setenv FFLAGS1 "-O3     -w90 -w95 -cm -72 -fno-alias -i4 -r8 -Vaxlib -fpe0 -traceback"
    setenv FFLAGS1 "-O2 -mp -w90 -w95 -cm -72 -fno-alias -i4 -r8 -Vaxlib -traceback"
    setenv LDFLAGS1 "-Vaxlib $LDFLAGS1"
###  for 32 bit executable under 64 bit OS (Opteron ...)
#    if (`uname -r` == 2.6.3-6mdksmp) then
#     setenv FFLAGS1 "-Wl,-m elf_i386 $FFLAGS1"
#     set MAKEAGRIF=Makefile.linux.ifc.64
#    endif
  else if ($LINUX_FC == g95) then
    set MAKEAGRIF=Makefile.linux.g95
    setenv CPP1 "cpp -traditional -DLinux"
    setenv CFT1 g95
    setenv FFLAGS1 "-O3 -i4 -r8 -fno-second-underscore" 
    setenv LDFLAGS1 "$LDFLAGS1"
  else if ($LINUX_FC == g77) then
    setenv CPP1 "cpp -traditional -DLinux"
    setenv CFT1 g77
    setenv FFLAGS1 "-O3 -Wall"
    setenv LDFLAGS1 "$LDFLAGS1"
  endif

else if ($uname == AIX) then       # IBM
  set OS = AIX
  set CONV=conv.ibm
  set MAKEAGRIF=Makefile.ibm
  setenv CPP1 /lib/cpp
  setenv CFT1 "xlf95 -I$HOME/include/"
  if ($BITS == THIRTYTWO) then
    set MAKEAGRIF=Makefile.ibm
    setenv FFLAGS1 "-qfixed -O5 -qstrict -qalias=noaryovrlp -qhot -qrealsize=8 -qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
#    setenv FFLAGS1 "-g -qfixed -O2 -qstrict -qalias=noaryovrlp -qrealsize=8 -qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
  else
    set MAKEAGRIF=Makefile.ibm.64
    setenv FFLAGS1 "-q64 -qwarn64 -qfixed -qrealsize=8 -qintsize=8 -qhot -qalias=noaryovrlp -qthreaded -O3 -qarch=pwr4 -qtune=pwr4 -qunroll=yes"
  endif

else if ($uname == OSF1) then     # COMPAQ
  set OS = OSF1
  set CONV=conv.compaq
  set MAKEAGRIF=Makefile.compaq
  setenv CPP1 /lib/cpp
  setenv CFT1 f95
  setenv FFLAGS1 "-fast -i4 -r8"

else if ($uname == IRIX64) then   # SGI
  set OS = IRIX64
  set CONV=conv.sgi
  set MAKEAGRIF=Makefile.sgi
  setenv CPP1 "/usr/freeware/bin/cpp -traditional"
  setenv CFT1 f90
  setenv FFLAGS1 "-O2"

else if ($uname == SunOS) then 	   # SUN:  tested on SunFire 880 (SPARC III)
  set GREP = /usr/xpg4/bin/grep    #       and Sun Ultra-60 (SPARC II)
  set OS = SunOS
  set CONV=conv.ibm
  set MAKEAGRIF=Makefile.sun
  setenv CPP1 /lib/cpp
  setenv CFT1 "f95"
  if ($BITS == THIRTYTWO) then
    set MAKEAGRIF=Makefile.sun
    setenv FFLAGS1 "-O5 -xtarget=native -xprefetch -xtypemap=real:64,double:128 -xlibmopt"
  else
    set MAKEAGRIF=Makefile.sun.64
    setenv FFLAGS1 "-O5 -xtarget=native64 -xprefetch -xtypemap=real:64,double:128 -xlibmopt "
  endif

else
  echo "Unknown Operating System"
  exit
endif

#
# determine if the compilation of AGRIF is necessary
#
unset COMPILEAGRIF
if { eval `$CPP1 testkeys | grep -i -q agrif` } then
  set COMPILEAGRIF = TRUE
  setenv FFLAGS1 "$FFLAGS1 -IAGRIFZOOM"
  setenv LDFLAGS1 "-LAGRIFZOOM -lagrif $LDFLAGS1"
endif

#
# determine if the openmp compilation is necessary
#
set COMPILEOMP
if { eval `$CPP1 testkeys | grep -i -q openmp` } then
  set COMPILEOMP = TRUE
  if ($OS == AIX) then
    setenv FFLAGS1 "$FFLAGS1 -qsmp=omp"
    setenv CFT1 xlf95_r
  else if ($OS == Linux) then
    setenv FFLAGS1 "$FFLAGS1 -openmp"
  else if ($OS == OSF1) then
    setenv FFLAGS1 "$FFLAGS1 -omp"
  else if ($OS == IRIX64) then
    setenv FFLAGS1 "$FFLAGS1 -mp"
  else if ($OS == SunOS) then 
    setenv FFLAGS1 "$FFLAGS1 -openmp"
  endif
endif

#
# write the Makedefs according to previous flags
#
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# clean scratch
#
$MAKE clobber

#
# compile the precompiling program
#
$MAKE mpc

#
# prepare and compile the library
#
if ($?COMPILEAGRIF) then
  /lib/cpp amr.in | grep -v -e ! -e '#' -e % -e '*' > AGRIFZOOM/amr.scrum
  set INCLUDELIST="param.h averages.h climat.h forces.h lmd_kpp.h mixing.h ocean2d.h ocean3d.h work.h private_scratch_AMR.h scalars.h ncscrum.h coupling.h grid.h tides.h sediment.h bbl.h zoom.h floats.h sources.h buffer.h diagnostics.h boundary.h"
		    
  foreach i ($INCLUDELIST)
    echo $i
    cat cppdefs.h $i | $CPP1 -P > AGRIFZOOM/$i
  end

  mv -f AGRIFZOOM/param.h .
  mv -f AGRIFZOOM/private_scratch_AMR.h AGRIFZOOM/private_scratch.h

  cd AGRIFZOOM
  ./$CONV amr.scrum -rm -comdirout ..
  /bin/rm -f *.h
  $MAKE -f $MAKEAGRIF COMDIRIN=./ COMDIROUT=./
  cd ..
endif

#
# compile roms
#
$MAKE 
mv roms $RUNDIR
#
